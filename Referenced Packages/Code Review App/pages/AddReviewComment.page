<apex:page controller="CR_App.AddReviewCommentController"  tabstyle="CR_App__Code_Review__c" sidebar="false" docType="html-5.0" >
    <apex:stylesheet value="{!URLFOR($Resource.CR_App__Code_Review_Css,'Code_Review_Css/AddReviewCommentStyle.css')}"/>

<!--         Css for autosuggest result -->
    <link rel="stylesheet" href="//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css">
    </link>
    <apex:includeScript value="https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js"/>

    <apex:form >
        <p id="errorMessage"></p>
        <div id="pageContent" style="width:100%">
            <div id="codePanel" style="width:75%;float:right">
                <div id="titleDiv">
                    <span id="pageTitle" style="font-size:25px" >{!$Label.CodeComponentPage_Title}</span>
                    <span id="reviewName">{!reviewName}</span>
                    <div class="pageSpace">
                        <table class="reviewControl" style="width:100%">
                            <tr>
                                <td class="completeCell">
                                    <input type="button" value="Complete Review" class="reviewControlButton" id="completeReviewButton"/>
                                </td>
                                <td class="backLinkCell">
                                    <input type="button" class="reviewControlButton" value="Back" id="backLink"></input>
                                </td>
                            </tr>
                        </table>
                     </div>
                  </div>

                <!-- Code for the selected code element displayed in this section. -->
                <!-- Auto suggest for the name of elements -->
                <apex:outputPanel id="elementInputPanel" style="width:100%;">
                    <div id="searchPanel">
                        <table id="elementSearchTable" style="width:100%;margin-left:10px;padding-bottom: 20px;">
                            <tr>
                                <td>
                                    <apex:outputText value="{!$Label.cr_app__CodeComponentCategory_OptionLabel}"/>
                                    <apex:selectList id="codeComponentCategory" 
                                        size="1" 
                                        value="{!selectedComponentApiName}"
                                        onchange="fetchRelatedCodeElements();return false; "
                                        style="margin-left:5px;"
                                    >
                                        <apex:selectOptions value="{!codeComponentCategoryOptionList}">
                                        </apex:selectOptions>
                                    </apex:selectList>
                                </td>
                                <td>
                                    <label id="elementLabel" for="codeElementInput">{!$Label.Autosuggest_Input_Label}</label>
                                    <input type="text" id="codeElementInput"></input>
                                    <input type="button" id="searchElementButton" value="Search" class="reviewControlButton"></input>
                                    <input type="button" id="saveAllButton" value="Save All" class="reviewControlButton"></input>
                                </td>
                            </tr>
                        </table>
                        <p id="errorText">{!$Label.CodeComponentNames_NoComponentFoundError}</p>
                    </div>
                </apex:outputPanel>
                <div id = "messageDiv">
                    <apex:pageMessage summary="{!$Label.cr_app__AddReview_OtherOption_SaveSuccessMessage}" 
                        severity="Info" 
                        strength="1"
                    />
                </div>
                <div id = "errorMessageDiv">
                    <apex:pageMessage summary="{!$Label.cr_app__AddReview_OtherOption_SaveErrorMessage}" 
                        severity="error" 
                        strength="1"
                    />
                </div>
                <div id = "addRowMessageDiv">
                    <apex:pageMessage summary="{!$Label.cr_app__AddReview_OtherOption_AddRowMessage}" 
                        severity="warning" 
                        strength="1"
                    />
                </div>
                <div id="codeDiv">
                   <table id="codeTextTable" cellpadding="5" cellspacing="0" style="width:100%;">
                   </table>
                   <table id="otherOptionTable" style="width:100%;">
                        <thead>
                            <tr>
                                <th>{!$Label.OtherOptionTabel_Header_SerialNumber}</th>
                                <th id="hiddenHeader"></th>
                                <th>{!$Label.OtherOptionTabel_Header_Component}</th>
                                <th>{!$Label.OtherOptionTabel_Header_ComponentName}</th>
                                <th>{!$Label.OtherOptionTabel_Header_Severity}</th>
                                <th>{!$Label.OtherOptionTabel_Header_Assignee}</th>
                                <th>{!$Label.OtherOptionTabel_Header_Comment}</th>
                                <th>{!$Label.ReviewerTable_Header_Action}</th>
                            </tr>
                        </thead>
                        <tbody id="commentRows">
                        </tbody>
                   </table>
                </div>
            </div>

            <div id="infoPanel" style="width:20%;float:left">
                <div style="width:100%;">
                <!--     Count information according to categories -->
                    <table id="infoTable" style="width:100%;">
                        <tr>
                            <td id="counterTable">
                                <img src="/img/arrowRight.gif" />
                                <b>{!$Label.AddReviewComment_CollapsibleMenu_IssueDetail}</b>
                                <span id="commentCounter" class="counter"></span>
                            </td>
                        </tr>
                        <tr id="countBySeverity">
                            <td class="infoHeaderRow">
                                <img src="/img/arrowRight.gif" />
                               {!$Label.AddReviewComment_CollapsibleMenu_SeverityCount}
                            </td>
                        </tr>
                        <tr class="severityTable">
                            <td>
                                <label for="low">
                                <b>{!$Label.CodeDetail_IssueCount_Low}</b>
                                </label>
                                <span id="low" class="counter"></span>
                            </td>
                        </tr>
                        <tr class="severityTable">
                            <td>
                                <label for="medium">
                                <b>{!$Label.CodeDetail_IssueCount_Medium}</b>
                                </label>
                                <span id="medium" class="counter"></span>
                            </td>
                        </tr>
                        <tr class="severityTable">
                            <td>
                                 <label for="high">
                                 <b>{!$Label.CodeDetail_IssueCount_High}</b>
                                 </label>
                                 <span id="high" class="counter"></span>
                            </td>
                        </tr>
                        <tr class="severityTable">
                            <td>
                                 <label for="blocker">
                                 <b>{!$Label.CodeDetail_IssueCount_Blocker}</b>
                                 </label>
                                 <span id="blocker" class="counter"></span>
                            </td>
                        </tr>
                        <tr id="countByStatus">
                            <td class="infoHeaderRow">
                               <img src="/img/arrowRight.gif" />
                               {!$Label.AddReviewComment_CollapsibleMenu_StatusCount}
                            </td>
                        </tr>
                        <tr class="statusTable">
                             <td>
                                  <label for="open">
                                  <b>{!$Label.CodeDetail_IssueCount_Open}</b>
                                  </label>
                                  <span id="open" class="counter"></span>
                             </td>
                        </tr>
                        <tr class="statusTable">
                              <td>
                                  <label for="discussion">
                                  <b>{!$Label.CodeDetail_IssueCount_Discussion}</b>
                                  </label>
                                  <span id="discussion" class="counter"></span>
                              </td>
                         </tr>
                         <tr class="statusTable">
                              <td>
                                   <label for="resolved">
                                   <b>{!$Label.CodeDetail_IssueCount_Resolved}</b>
                                   </label>
                                   <span id="resolved" class="counter"></span>
                               </td>
                          </tr>
                          <tr class="statusTable">
                               <td>
                                    <label for="closed">
                                    <b>{!$Label.CodeDetail_IssueCount_Closed}</b>
                                    </label>
                                    <span id="closed" class="counter"></span>
                               </td>
                         </tr>
                         <tr id="history">
                            <td class="infoHeaderRow">
                                <img src="/img/arrowRight.gif" />
                                {!$Label.AddReviewComment_CollapsibleMenu_History}
                            </td>
                         </tr>
                         <tr class="codeHeader">
                              <td>
                                  <span id="element" class="detailSpan"></span>
                              </td>
                         </tr>
                         <tr class="codeHeader">
                               <td>
                                   <b>{!$Label.CodeElement_CreatedByLabel}</b>
                                   <span id="createdBy" class="detailSpan"></span>
                               </td>
                         </tr>
                         <tr class="codeHeader">
                               <td>
                                   <b>{!$Label.CodeElement_CreatedOnLabel}</b>
                                   <span id="createdOn" class="detailSpan"></span>
                               </td>
                         </tr>
                         <tr class="codeHeader"> 
                               <td>
                                   <b>{!$Label.CodeElement_LastModifiedByLabel}</b>
                                   <span id="modifiedBy" class="detailSpan"></span>
                               </td>
                          </tr>
                          <tr class="codeHeader">
                               <td>
                                   <b>{!$Label.CodeElement_ModifiedOnLabel}</b>
                                   <span id="modifiedOn" class="detailSpan"></span>
                               </td>
                          </tr>
                    </table>
                </div>
            </div>
        </div>

        <apex:outputPanel id="noneCategoryMessage">
                <apex:pageMessages />
        </apex:outputPanel>
        <!-- Popup panel for adding code review comment -->
        <div id="popupPanel" >
            <apex:outputPanel layout="block" styleClass="popupBackground">
                <apex:outputPanel layout="block" styleClass="popup">
                    <table id="inputTable" >
                        <tr>
                            <th id="popupHeader" colspan="2">
                                {!$Label.CommentPopup_HeaderLabel}
                                <span id="lineNumberValue"></span>
                            </th>
                        </tr>
                        <tr>
                            <td>
                                <label for="assigneeSelect">
                                    <b>{!$Label.CodeComment_Input_AssignedToLabel}</b>
                                </label>
                                <select id="assigneeSelect"></select>
                            </td>
                            <td>
                                <label for="severitySelect">
                                    <b>{!$Label.CodeComment_Input_SeverityLabel}</b>
                                </label>
                                <select id="severitySelect"></select>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <apex:outputText >
                                    <b>{!$Label.cr_app__CodeComment_Input_CommentDescription_Label}</b>
                                </apex:outputText>
                            </td>
                        </tr>
                        <tr>
                        <td colspan="3" >
                            <textarea id="commentTextArea" 
                                style="width:100%; resize:none" 
                                rows="10">
                            </textarea>
                        </td>
                    </tr>
                </table>
               <div style = "text-align:center;width:100%;">
                    <input id="popupSaveButton" type="button" value="Save"></input>
                    <input id="popupCancelButton" type="button" value="Cancel"></input>
                    <input id="popupDeleteButton" type="button" value="Delete"></input>
                </div>

            </apex:outputPanel>
            </apex:outputPanel>
        </div>
    </apex:form>
    <!--     Library for autocomplete UI -->
    <script src="//code.jquery.com/ui/1.11.4/jquery-ui.js"></script>
    <script>
         $("#popupPanel").hide();
        var commentList = [];
        var searchResults = [];
        var reviewId = getUrlParamater();   //Getting the code review id.
        reviewId = reviewId.substring(0,15);
        $("#errorText").hide();
        $(".commentCountSpan").hide();
        $("#codeTextTable").hide();
        $(".severityTable").hide();
        $(".statusTable").hide();
        $(".codeHeader").hide();
        $("#saveAllButton").hide();
        $("#completeReviewButton").hide();
        $(document).ready(function() {
            $("#popupPanel").hide();
            $("#codeDiv").hide();
            $('#hiddenHeader').hide();
            $('#messageDiv').hide();
            $("#errorMessageDiv").hide();
            $("#addRowMessageDiv").hide();
            addPopupSelectOptions();
            CR_App.AddReviewCommentController.fetchReviewComments(
                reviewId,
                function(result, event) {
                    commentList = result;
                    updateCommentCounter();
                }
            );
        });

                /**
         *Function displays the Severity Issuecount table.
         */
        $("#countBySeverity").click(function() {
            if($(".severityTable").css('display') != 'none'){
                $(".severityTable").hide();
            }
            else{
                $(".severityTable").show();
            }
        });

                /**
         *Function displays the Status Issuecount table.
         */
        $("#countByStatus").click(function() {
            if($(".statusTable").css('display') != 'none'){
                $(".statusTable").hide();
            }
            else{
                $(".statusTable").show();
            }
        });

        /**
         *Function displays the Component History table.
         */
        $("#history").click(function() { 
            if($(".codeHeader").css('display') != 'none'){
                $(".codeHeader").hide();
            }
            else{
                if($("#element").text() !='') {
                    $(".codeHeader").show();
                }
            }
        });

        /**
         *Function helps to collapse all the issue count detail panels.
         */
        $("#counterTable").click(function() {
            if( ($(".codeHeader").css('display') != 'none') ||
                ($(".statusTable").css('display') != 'none') ||
                ($(".severityTable").css('display') != 'none')
            ) {
                $(".codeHeader").hide();
                $(".statusTable").hide();
                $(".severityTable").hide();
            }
            else {
                if($("#element").text() !='') {
                    $(".codeHeader").show();
                }
                $(".statusTable").show();
                $(".severityTable").show();
            }
        });

        /**
        *Function to add popup select options.
        */
        function addPopupSelectOptions() {
            userOptions = formatUserDropdownValues('{!userList}');
            addUserDropdownValues('assigneeSelect',userOptions);
            addDropdownValues('severitySelect','{!severityOptionLabelList}'.split(','));
        }

        /**
        *This function is called for onchange event of selectlist of code component category.
        */
        function fetchRelatedCodeElements() {
            $("#codeDiv").hide();
            $('#messageDiv').hide();
            codeCategory =$("[id$=codeComponentCategory]").val();
            $("#codeElementInput").val('');
            $("#codeTextTable").hide();
            $("#completeReviewButton").hide();
            $("#element").text('');
            $("#codeHeader").hide();
            $("#errorText").hide();
            $("#addRowMessageDiv").hide();
            CR_App.AddReviewCommentController.extractCodeComponentElements(
                codeCategory,
                function(result,event) {
                    searchResults = result;
                    $("#codeElementInput").autocomplete({
                        source: result,
                    });
                }
            );
            if(codeCategory == "{!$Label.CodeCategory_OthersOption}") {
                $(".codeHeader").hide();
                $("#searchElementButton").val("{!$Label.AddReviewComment_AddComment_Button}");
                $("#completeReviewButton").show();
                $("#saveAllButton").show();
                $("#elementLabel").text("{!$Label.AddReviewComment_ComponentSubcategory}");
                $("#codeDiv").show();
                var newTable = $("#otherOptionTable tbody");
                newTable.empty();
                showOtherOptionComments();
                $("#otherOptionTable").show();
            }
            else{
                $("#saveAllButton").hide();
                $("#searchElementButton").val("{!$Label.AddReviewComment_Search_Button}");
                $("#elementLabel").text("{!$Label.Autosuggest_Input_Label}");
            }
        }

        /**
         *
         */
        function setOtherOptionTablepickValues(currentRow) {
            addSeverityOptions(currentRow,'{!severityOptionLabelList}'.split(','));
            addUserOptions(currentRow,userOptions);
        }

        /**
        * Adds dropdown values to specified select input
        */
        function addSeverityOptions(currentRow, values) {
            if (values && values.length) {
                currentRow.find('.severitySelect').empty();
                $.each(values, function(index, element) {
                    var newOption = $('<option/>');
                    newOption.attr('value', element);
                    newOption.text(element);
                    currentRow.find('.severitySelect').append(newOption);
                });
            }
        }

       /**
        * Adds dropdown values to specified select input
        */
        function addUserOptions(currentRow, values) {
            if (values && values.length) {
                currentRow.find('.assigneeSelect').empty();
                $.each(values, function(index, element) {
                    var newOption = $('<option/>');
                    newOption.attr('value', element.userId);
                    newOption.text(element.userName);
                    currentRow.find('.assigneeSelect').append(newOption);
                });
            }
        }

        /**
        *This function is called for the search button of code elements.
        */
        $("#searchElementButton").click(function() {
            $('#messageDiv').hide();
            codeElement = $("#codeElementInput").val();
            checkCodeElement(codeElement);
        });

        /**
        *Function to check for code element.
        */
        function checkCodeElement(inputElement) {
            if(inputElement.length > 0) {
                if($.inArray(inputElement,searchResults) < 0) {
                    $("#errorText").show();
                    $("#codeTextTable").hide();
                    $("#completeReviewButton").hide();
                    $("#codeHeader").hide();
                    $("#addRowMessageDiv").hide();
                }
                else {
                    if(codeCategory == "{!$Label.CodeCategory_OthersOption}") {
                        var newRow = addRows();
                        setOtherOptionTablepickValues(newRow);
                        var newTable = $("#otherOptionTable tbody");
                        var rowCount = $('#otherOptionTable tr').length;
                        newRow.find(".hiddenSpan").text(otherCounter);
                        otherCounter++;
                        newRow.find(".rowNo").text(rowCount);
                        newRow.find(".elementName").text(codeElement);
                        newRow.appendTo(newTable);
                        checkInputChange();
                        $("#addRowMessageDiv").hide();
                        $("#errorText").hide();
                        $("#errorMessageDiv").hide();
                    }
                    else {
                        createCodeTextByLineNumberTable(codeElement, 
                            codeCategory
                        );
                    }
                }
            }
            else {
                $("#errorText").show();
                $("#codeTextTable").hide();
                $("#completeReviewButton").hide();
                $("#codeHeader").hide();
                $("#addRowMessageDiv").hide();
            }
        }

        /**
        *Remote function called for getting the body of selected code element.
        */
        function createCodeTextByLineNumberTable(selectedCodeElementName,
            selectedCodeComponentName
       ) {
            $("#codeReviewActions").show();
            Visualforce.remoting.Manager.invokeAction (
                '{!$RemoteAction.AddReviewCommentController.extractCodeElementBody}',
                selectedCodeElementName,selectedCodeComponentName,
                function(result,event) {
                    if(event.status){
                        var deleteRowIndex=0;
                        $("#codeTextTable").empty();
                        $(".headerRow").empty();
                        $("#element").text(selectedCodeElementName);
                        $("#createdBy").text(result[0].createdByUser);
                        $("#createdOn").text(result[0].createdOn);
                        $("#modifiedBy").text(result[0].lastModifiedByUser);
                        $("#modifiedOn").text(result[0].lastModifiedOn);
                        var codeTable = document.getElementById("codeTextTable");
                        var tableBody = $('<tbody></tbody>').attr({class:"codeTableBody"});
                        for(var i = 0; i < result.length; i++) {
                            var row2 = $('<tr></tr>').attr({class:"codeRow"}).appendTo(tableBody);
                            var cell1 = $('<td></td>').attr({class:"lineNumber"}).text(result[i].lineNumber).appendTo(row2);
                            var cell2 = $('<td></td>').attr({class:"note"}).appendTo(row2);
                            var span1 = $('<span></span>').attr({class:"commentedSymbol"}).text('!').appendTo(cell2);
                            var cell3 = $('<td></td>').attr({class:"codeLine"}).html(result[i].codeLine).wrapInner('<pre></pre>').appendTo(row2);
                            var cell4 = $('<td></td>').attr({class:"closedCommentSpan"}).appendTo(row2);
                            var span2 = $('<span></span>').attr({class:"closedComment"}).html('<img src="/img/msg_icons/confirm16.png"/>').appendTo(cell4);                        
                        }
                        tableBody.appendTo("#codeTextTable");
                        //$("#codeHeader").show();
                        $("#errorText").hide();
                        $("#codeDiv").show();
                        $("#codeTextTable").show();
                        $("#otherOptionTable").hide();
                        $("#completeReviewButton").show();
                        $(".commentedSymbol").hide();
                        $(".closedComment").hide();
                        showCommentedLines();
                        $(".codeRow").dblclick(function(event) {
                            clickedRow = $(this);
                            number = $(this).find("td.lineNumber").text();
                            lineOfCode = $(this).find("td.codeLine").text();
                            $("#lineNumberValue").text(number);
                            severityVal = '{!severityOptionLabelList}'.split(',');
                            $("#severitySelect").val(severityVal[2]);
                            $("#popupPanel").show();
                            displayAvailableCommentInPopup();
                        });
                    }
                    else{
                        document.getElementById('errorMessage').innerHTML=event.message;
                    }
                }
            ); 
       }

        /**
         *Function to display the comments in Other option category.
         */
        function showOtherOptionComments() {
            otherCounter = 0;
            var newTable = $("#otherOptionTable tbody");
            newTable.empty();
            if(commentList.length > 0) {
                for(var i = 0; i < commentList.length; i++) {
                    if(commentList[i].codeLine == 'Other options component' || commentList[i].codeLine == '--') {
                        var commentRow = addRows();
                        var rowCount = $('#otherOptionTable tr').length;
                        setOtherOptionTablepickValues(commentRow);
                        commentRow.find(".rowNo").text(rowCount);
                        commentRow.find(".hiddenSpan").text(commentList[i].lineNumber);
                        commentRow.find(".elementName").text(commentList[i].componentCategory);
                        commentRow.find(".nameInput").val(commentList[i].componentName);
                        commentRow.find(".severitySelect").val(commentList[i].severity);
                        commentRow.find(".commentInput").val(commentList[i].comment);
                        commentRow.find(".assigneeSelect").val(commentList[i].assignee);
                        commentRow.appendTo(newTable);
                        otherCounter = commentList[i].lineNumber;
                        otherCounter++;
                    }
                }
            }
            checkInputChange();
        }

        /**
         *Function to add rows to other Option table.
         */
        function addRows() {
            var row1 = $('<tr></tr>')
            var cell1 = $('<td></td>').attr({class:"rowNo"}).appendTo(row1);
            var cell8 = $('<td></td>').attr({class:"hiddenSpan"}).appendTo(row1);
            cell8.css('display', 'none');
            var cell2 = $('<td></td>').attr({class:"elementName"}).appendTo(row1);
            var cell3 = $('<td></td>').appendTo(row1);
            var componentInput = $('<input></input>').attr('type','text').val('').appendTo(cell3);
            componentInput.attr({class:"nameInput"});
            var cell4 = $('<td></td>').appendTo(row1);
            var severityPick = $('<select></select>').attr({class:"severitySelect"});
            severityPick.appendTo(cell4);
            var cell5 = $('<td></td>').appendTo(row1);
            var assigneePick = $('<select></select>').attr({class:"assigneeSelect"}).appendTo(cell5);
            var cell6 = $('<td></td>').appendTo(row1);
            var commentArea = $('<textarea></textarea>').attr({class:"commentInput"}).appendTo(cell6);
            var cell7 = $('<td></td>').appendTo(row1);
            var button1 = $('<a></a>').appendTo(cell7);
            button1.html('<img src="/img/func_icons/util/checkmark16.gif" />');
            button1.attr({class:"otherSave"});
            button1.attr({title:"{!$Label.AddReview_OtherOption_SaveCommentTooltip}"});
            var button2 = $('<a></a>').appendTo(cell7);
            button2.html('<img src="/img/func_icons/remove12_on.gif" />');
            button2.attr({class:"otherDelete"});
            button2.attr({title:"{!$Label.AddReview_OtherOption_DeleteCommentTooltip}"});
            return row1;
        }

        /**
         *Function called on Others Save button click.
         */
        $("#otherOptionTable").on('click','.otherSave',function(event) {
            var rowSelected = $(this).closest("tr");
            if( rowSelected.find(".nameInput").val() == '' ||
                rowSelected.find(".commentInput").val() == ''
            ) {
                $("#errorMessageDiv").show();
            }
            else {
                addOtherComments(rowSelected);
                $('#messageDiv').show();
                $("#errorMessageDiv").hide();
            }
        });

        /**
         *
         */
        $("#saveAllButton").click(function() {
            var rowCount = $('#otherOptionTable tr').length;
            var flag = 0;
            if (rowCount > 1) {
                $("#commentRows tr").each(function() {
                    if($(this).find(".nameInput").val() == '' ||
                        $(this).find(".commentInput").val() == ''
                    ) {
                        $("#errorMessageDiv").show();
                        flag = 1;
                    }
                });
                if (flag != 1) {
                    $("#commentRows tr").each(function() {
                        addOtherComments($(this));
                    });
                    $('#messageDiv').show();
                    $("#errorMessageDiv").hide();
                }
            }
            else {
                $("#addRowMessageDiv").show();
            }
        });

        /**
         *Function called to save the comments when Other option is selected.
         */
        function addOtherComments(rowSelected) {
            codeElement = rowSelected.find(".elementName").text();
            var reviewComment = {
                componentCategory : codeElement,
                componentName : rowSelected.find(".nameInput").val(),
                lineNumber : rowSelected.find(".hiddenSpan").text(),
                codeLine : 'Other options component',
                comment : rowSelected.find(".commentInput").val(),
                severity : rowSelected.find(".severitySelect").val(),
                status : 'Open',
                assignee : rowSelected.find(".assigneeSelect").val(),
                remarks : ''
            }
            saveCommentToAttachment(reviewComment);
        }

        /**
         *Function to hide the pagemessage on any input change.
         */
        function checkInputChange() {
        $(":input").change(function() {
                $("#messageDiv").hide();
                $("#errorMessageDiv").hide();
            });
        }

        /**
         *Function called on Others Delete button click.
         */
        $("#otherOptionTable").on('click','.otherDelete',function(event) {
            var rowSelected = $(this).closest("tr");
            if(commentList.length > 0) {
            var tempList = [];
                for(var i = 0; i < commentList.length; i++) {
                    if( commentList[i].componentCategory == rowSelected.find(".elementName").text() &&
                            commentList[i].componentName == rowSelected.find(".nameInput").val() &&
                            commentList[i].lineNumber == rowSelected.find(".hiddenSpan").text()
                    ) {
                        var deleteCommentJsonString = JSON.stringify(commentList[i]);
                        CR_App.AddReviewCommentController.deleteComments(
                            deleteCommentJsonString,reviewId,
                            function(result, event) {
                                updateCommentCounter();
                                showOtherOptionComments();
                            }
                        );
                    }
                    else {
                        tempList.push(commentList[i]);
                    }
                }
                commentList = tempList;
            }
            rowSelected.remove();
            $('#messageDiv').hide();
        });

       /**
        * Adds dropdown values to specified select input
        */
        function addDropdownValues(selectId, values) {
            if (values && values.length) {
                $('#'+selectId).empty();
                $.each(values, function(index, element) {
                    var newOption = $('<option/>');
                    newOption.attr('value', element);
                    newOption.text(element);
                    $('#'+selectId).append(newOption);
                });
            }
        }

        /**
        * Adds dropdown values to specified select input
        */
        function addUserDropdownValues(selectId, values) {
            if (values && values.length) {
                $('#'+selectId).empty();
                $.each(values, function(index, element) {
                    var newOption = $('<option/>');
                    newOption.attr('value', element.userId);
                    newOption.text(element.userName);
                    $('#'+selectId).append(newOption);
                });
            }
        }

        /**
        *Formats the options list of dropdown. 
        */
        function formatUserDropdownValues(optionList) {
            optionList = optionList.replace('[','');
            optionList = optionList.replace(']','');
            var splittedUsers= optionList.split(',');
            var users = [];
            for (var i = 0;i < splittedUsers.length; i++) {
                var userInfo = splittedUsers[i].split('#');
                var objUser = {userId : userInfo[0], userName : userInfo[1] };
                users.push(objUser);
            }
            return users;
        }

        /**
        *Function called at the click action of Cancel button.
        */
        $("#popupCancelButton").click(function() {
            $("#popupPanel").hide();
        });

        /**
        *Function called at the click action of Close button.
        */
        $("#popupSaveButton").click(function() {
            if( 
                ($("#commentTextArea").val() != '')
              ) {
                var reviewComment = {
                    componentCategory : codeCategory,
                    componentName : codeElement,
                    lineNumber : $("#lineNumberValue").text(),
                    codeLine : lineOfCode,
                    comment : $("#commentTextArea").val(),
                    severity : $("#severitySelect").val(),
                    status : 'Open',
                    assignee : $("#assigneeSelect").val(),
                    remarks : ''
                }
                saveCommentToAttachment(reviewComment);
                $("#popupPanel").hide();
                //Function called to display the commented lines
                showCurrentCommentedRows(reviewComment);
            }
            else{
                alert('{!popupError}');
            }
        });

        /**
         *Function to save the comment to attachment.
         */
        function saveCommentToAttachment(reviewComment) {
            if(commentList.length > 0) {
                for(var i = 0; i < commentList.length; i++) {
                    if( commentList[i].componentCategory == reviewComment.componentCategory &&
                        commentList[i].componentName == reviewComment.componentName &&
                        commentList[i].lineNumber == reviewComment.lineNumber
                    ) {
                        commentList[i] = reviewComment;
                        break;
                    }
                }
                if(i >= commentList.length) {
                    commentList[i] = reviewComment;
                }
            }else {
                commentList[0] = reviewComment;
            }
            var commentJsonString = JSON.stringify(reviewComment);
            CR_App.AddReviewCommentController.createCommentAttachment(
                commentJsonString,reviewId,
                function(result, event) {
                    updateCommentCounter();
                }
            );
        }

        /**
        *Function called at the click action of Delete button.
        */
        $("#popupDeleteButton").click(function() {
            if(commentList.length > 0) {
            var tempList = [];
                for(var i = 0; i < commentList.length; i++) {
                    if( commentList[i].componentCategory == codeCategory &&
                            commentList[i].componentName == codeElement &&
                            commentList[i].lineNumber == number
                    ) {
                        var deleteCommentJsonString = JSON.stringify(commentList[i]);
                        CR_App.AddReviewCommentController.deleteComments(
                            deleteCommentJsonString,reviewId,
                            function(result, event) {
                                $("#popupPanel").hide();
                                hideDeletedComments();
                                updateCommentCounter();
                            }
                        );
                    }
                    else {
                        tempList.push(commentList[i]);
                    }
                }
                commentList = tempList;
            }
            $("#popupPanel").hide();
        });

        /**
         *Function to update the total count of comments of code review.
         */
         function updateCommentCounter() {
            $("#commentCounter").text(commentList.length);
            var severityCount = {
                low : 0,
                medium : 0,
                high : 0,
                blocker : 0
            }
            var statusCount = {
                open : 0,
                discussion : 0,
                closed : 0,
                resolved : 0
            }
            for (i = 0; i < commentList.length; i++) {
                if (commentList[i].status == 'Open') {
                    statusCount.open += 1;
                }
                else if(commentList[i].status == 'Discussion Required') {
                    statusCount.discussion += 1;
                }
                else if(commentList[i].status == 'Resolved') {
                    statusCount.resolved += 1;
                }
                else {
                    statusCount.closed += 1;
                }
                if (commentList[i].severity == 'Low') {
                    severityCount.low += 1;
                }
                else if (commentList[i].severity == 'Medium') {
                    severityCount.medium += 1;
                }
                else if (commentList[i].severity == 'High') {
                    severityCount.high += 1;
                }
                else{
                    severityCount.blocker += 1;
                }
            }
            $("#low").text(severityCount.low);
            $("#medium").text(severityCount.medium);
            $("#high").text(severityCount.high);
            $("#blocker").text(severityCount.blocker);
            $("#open").text(statusCount.open);
            $("#discussion").text(statusCount.discussion);
            $("#closed").text(statusCount.closed);
            $("#resolved").text(statusCount.resolved);
         }

        /**
         *Function called on click of cancel button of code page.
         */
        $("#backLink").click(function() {
            window.location="/"+reviewId;
        });

        /**
         *Function called on click of cancel button of code page.
         */
        $("#completeReviewButton").click(function() {
            if(commentList.length > 0){
                CR_App.AddReviewCommentController.completeCodeReview(
                    reviewId,
                    function(result, event) {
                        window.location="/"+reviewId;
                    }
                );
            }
            else {
                window.location="/"+reviewId;
            }
        });

        /**
        *Function called to display the comments added on the line by user in same code review.
        */
        function displayAvailableCommentInPopup() {
            if(commentList.length >= 0) {
                for(var i = 0; i < commentList.length; i++) {
                    if( commentList[i].componentCategory.localeCompare(codeCategory) == 0 &&
                        commentList[i].componentName.localeCompare(codeElement) == 0 &&
                        commentList[i].lineNumber == clickedRow.find("td.lineNumber").text()
                    ) {
                        $("#assigneeSelect").val(commentList[i].assignee);
                        $("#severitySelect").val(commentList[i].severity);
                        $("#commentTextArea").val(commentList[i].comment);
                        break;
                    }
                }
                if(i >= commentList.length) {
                    $("#commentTextArea").val('');
                    $("#assigneeSelect").val($("#assigneeSelect option:first").val());
                }
            }
        }

        /**
        *Function to show commented line.
        */
        function showCurrentCommentedRows(reviewComment) {
            var selected = clickedRow.find("td.note");
            updateWarning(selected,reviewComment);
            selected.find(".commentedSymbol").show();
        }

        /**
        *Function to hide the tick mark and number of comments of deleted comments.
        */
        function hideDeletedComments() {
            var selected = clickedRow.find("td.note");
            selected.find(".commentedSymbol").hide();
            var closedLine = clickedRow.find("td.closedCommentSpan");
            closedLine.find(".closedComment").hide();
        }

        /**
        *Function to return the review id present in the URL of current page.
        */
        function getUrlParamater() {
            var urlParameter = window.location.href.split('?');
            return urlParameter[1].split('=')[1];
        }

        /**
        *Function to display all the saved comments in the attachment of the code review.
        */
        function showCommentedLines() {
            for(var i = 0; i < commentList.length; i++) {
                if( commentList[i].componentCategory.localeCompare(codeCategory) == 0 &&
                        commentList[i].componentName.localeCompare(codeElement) == 0 
                ) {
                    $("#codeTextTable tr").each(function() {
                        if($(this).find("td.lineNumber").text() == commentList[i].lineNumber) {
                            var selected = $(this).find("td.note");
                            var closedLine = $(this).find("td.closedCommentSpan");
                            updateWarning(selected,commentList[i]);
                            selected.find(".commentedSymbol").show();
                            if(commentList[i].status == 'Closed') {
                                closedLine.find(".closedComment").show();
                            }
                        }
                    });
                }
            }
        }

        /**
         *Maniputlate the warning symbol.
         */
         function updateWarning(targetSpan,commentOnLine) {
            targetSpan.find(".commentedSymbol").attr({title:commentOnLine.comment});
            if(commentOnLine.severity == 'Low') {
                var backColor = '#f9ff33';
            }
            else if(commentOnLine.severity == 'Medium') {
                var backColor = '#ffb433';
            }
            else if(commentOnLine.severity == 'High') {
                var backColor = '#ff3333';
            }
            else {
                var backColor = '#ff0001';
            }
            targetSpan.find(".commentedSymbol").css({"background":backColor,"color":"black","font-weight":"bold"});
         }
    </script>
</apex:page>